PARSER_BEGIN(Rust)
import java.io.*;
class Rust 
{
	public static void main( String[] args )throws ParseException, Exception
	{
		Rust lex = new Rust(new FileInputStream(args[0]));
		lex.AnaliseLexica();
		
	}

	// [ ]
	// Sobre caracteres especiais como '!', tem que tratar fora do a-z, e ler o manual da linguagem pra saber
	// tudo que pode ser inserido numa string.

	// [OK]
	// A impressão é por saída padrão, então o algoritmo vai ler o arquivo com um código em Rust,
	// após isso ele identifica cada token.

	// [ ]
	// Qual asnixxx tem no rust? tomar cuidado pra não fazer mais do que se pede no trabalho!!!!

	// [ ]
	// mostrar no vídeo o manual, o que eu fiz, comparar, descrever o código
	// mostra o código, fiz isso por que no manual tem isso e etc

}
PARSER_END(Rust)


/***********************************************************
 * PALAVRAS RESERVADAS                                     *
 * Rust divide as palavras reservadas em três categorias:  *
 * 1) Strict		2) Reserved 	3) Weak                *
 ***********************************************************/


 /*******************************
 * PALAVRAS RESERVADAS: STRICT  *
 ********************************/
TOKEN:
{
	  <KW_AS: "as">
	| <KW_BREAK: "break">
	| <KW_CONST: "const">
	| <KW_CONTINUE: "continue">
	| <KW_CRATE: "crate">
	| <KW_ELSE: "else">
	| <KW_ENUM: "enum">
	| <KW_EXTERN: "extern">
	| <KW_FALSE: "false">
	| <KW_FN: "fn">
	| <KW_FOR: "for">
	| <KW_IF: "if">
	| <KW_IMPL: "impl">
	| <KW_IN: "in">
	| <KW_LET: "let">
	| <KW_LOOP: "loop">
	| <KW_MATCH: "match">
	| <KW_MOD: "mod">
	| <KW_MOVE: "move">
	| <KW_MUT: "mut">
	| <KW_PUB: "pub">
	| <KW_REF: "ref">
	| <KW_RETURN: "return">
	| <KW_SELFVALUE: "self">
	| <KW_SELFTYPE: "Self">
	| <KW_STATIC: "static">
	| <KW_STRUCT: "struct">
	| <KW_SUPER: "super">
	| <KW_TRAIT: "trait">
	| <KW_TRUE: "true">
	| <KW_TYPE: "type">
	| <KW_UNSAFE: "unsafe">
	| <KW_USE: "use">
	| <KW_WHERE: "where">
	| <KW_WHILE: "while">
	| <KW_ASYNC : "async">
	| <KW_AWAIT : "await">
	| <KW_DYN : "dyn">
}


 /**********************************
 * PALAVRAS RESERVADAS: RESERVERD  *
 ***********************************/
TOKEN:
{
	  <KW_ABSTRACT : "abstract">
	| <KW_BECOME : "become">
	| <KW_BOX : "box">
	| <KW_DO : "do">
	| <KW_FINAL : "final">
	| <KW_MACRO : "macro">
	| <KW_OVERRIDE : "override">
	| <KW_PRIV : "priv">
	| <KW_TYPEOF : "typeof">
	| <KW_UNSIZED : "unsized">
	| <KW_VIRTUAL : "virtual">
	| <KW_YIELD : "yield">
	| <KW_TRY : "try">
}


/******************************
 * PALAVRAS RESERVADAS: WEAK  *
 ******************************/
TOKEN:
{
	  <KW_UNION : "union">
	| <KW_STATICLIFETIME : "'static"">
	| <KW_DYN : "dyn">
}

TOKEN:
{
	  <FN: "fn"> 
	| <MAIN: "main">
	| <PRINTLN: "println!" >
}


/******************
 * DELIMITADORES  *
 ******************/
TOKEN:
{
      <APAREN: "(" >
	| <FPAREN: ")" >
	| <ACHAVES: "{" >
	| <FCHAVES: "}" >
	| <ACOLCHETE: "[" >
	| <FCOLCHETE: "]" >
}


/***************
 * PONTUAÇÕES  *
 ***************/
TOKEN:
{
	  <MAIS: "+">
	| <MENOS: "-">
	| <ESTRELA: "*">
	| <BARRAINVERTIDA: "/">
	| <PORCENTO: "%">
	| <CHAPEU: "^">
	| <EXCLAMACAO: "!">
	| <ECOMERCIAL: "&">
	| <OU: "|">
	| <ANDAND: "&&">
	| <OUOU: "||">
	| <MENORMENOR: "<<">
	| <MAIORMAIOR: ">>">
	| <MAISIGUAL: "+=">
	| <MENOSIGUAL: "-=">
	| <ESTRELAIGUAL: "*=">
	| <CONTRABARRAIGUAL: "/=">
	| <PORCENTOIGUAL: "%=">
	| <CHAPEUIGUAL: "^=">
	| <ECOMERCIALIGUAL: "&=">
	| <OUIGUAL: "|=">
	| <MENORMENORIGUAL: "<<=">
	| <MAIORMAIORIGUAL: ">>=">
	| <IGUAL: "=">
	| <IGUALIGUAL: "==">
	| <DIFERENTE: "!=">
	| <MAIORQUE: ">">
	| <MENORQUE: "<">
	| <MAIOROUIGUAL: ">=">
	| <MENOROUIGUAL: "<=">
	| <ARROBA: "@">
	| <UNDERLINE: "_">
	| <PONTO: "." >
	| <PONTOPONTO: ".." > 
	| <PONTOPONTOPONTO: "..." >
	| <PONTOPONTOIGUAL: "..=" >
	| <VIRGULA: "," > 
	| <PONTOVIRGULA: ";" >
	| <DOISPONTOS: ":" >
	| <DUPLODOISPONTOS: "::" >
	| <SETA: "->">
	| <SETAGORDA: "=>">
	| <QUADRADO: "#">
	| <CIFRAO: "$">
	| <ASPASDUPLAS: "\"">
	| <ASPASSIMPLES: "\'">
	| <INTERROGACAO: "?">
}


/*************************************
 * NUMEROS, DECIMAIS, FLOAT, STRING  *
 *************************************/
TOKEN:
{
	  <NUM : (["0"-"9"])+>
	| <DECIMAL : (["0"-"9"])+["."](["0"-"9"])+ >
	| <CADEIA : <ASPASDUPLAS>["a"-"z","A"-"Z","0"-"9"," "](["a"-"z","A"-"Z","0"-"9"," ",":",";",".","!","@","#","$","%","&","*"])*<ASPASDUPLAS>>
	| <CARACTERE : "'"["a"-"z","A"-"Z","0"-"9"]"'" >
}


/**********************
 * ESPACOS EM BRANCO  *
 **********************/
SKIP : 
{ 
	" " | "\n" | "\r" | "\t"
}

void AnaliseLexica() :
{Token t;}
{
	(
			<KW_FN> 		{System.out.println(">> PALAVRA RESERVADA: fn");}
		|	<MAIN> 	  		{System.out.println(">> PALAVRA RESERVADA: main");}
		|	<PRINTLN> 		{System.out.println(">> PALAVRA RESERVADA: println!");}
		| t=<CADEIA> 	    {System.out.println(">> CADEIA DE CARACTERES: " + t.image);}
		|	<ASPASDUPLAS> 	{System.out.println(">> ASPAS DUPLAS: \"");}
		|	<PONTOVIRGULA> 	{System.out.println(">> PONTO E VIRGULA: ;");}
		|	<ACHAVES>		{System.out.println(">> DELIMITADOR: {");}
		|	<FCHAVES>		{System.out.println(">> DELIMITADOR: }");}
		|	<APAREN> 		{System.out.println(">> DELIMITADOR: (");}
		|	<FPAREN> 		{System.out.println(">> DELIMITADOR: )");}
		| t=<NUM>			{System.out.println(">> NUMERO: " + t.image);}
	)*
}
